import type {NextPage} from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {API, graphqlOperation} from "aws-amplify";

import {listTodos} from "../src/graphql/queries";
import {createTodo, deleteTodo, updateTodo} from "../src/graphql/mutations";
import {onCreateTodo, onDeleteTodo, onUpdateTodo} from "../src/graphql/subscriptions";

import {useEffect, useState} from "react";
import classNames from "classnames";
import {ListTodos, Todo} from '../src/graphql/types';
import {Observable} from "zen-observable-ts";

const Home: NextPage = () => {
    const [todos, setTodos] = useState<Todo[]>([]);

    useEffect(() => {
        fetchTodos();
        console.log("subscribing");
        const createGraphql = API.graphql(graphqlOperation(onCreateTodo)) as Observable<any>;
        const subscriptionOnCreateTodo = createGraphql.subscribe({
            next: (data: Todo[]) => {
                console.log("subscriptionOnCreateTodo", data);
                fetchTodos();
            }
        });

        let updateGraphql = API.graphql(graphqlOperation(onUpdateTodo)) as Observable<any>;
        const subscriptionOnUpdateTodo = updateGraphql.subscribe({
            next: (data: Todo[]) => {
                console.log("subscriptionOnUpdateTodo", data);
                fetchTodos();
            }
        }, (err: any) => {

        })
        let deleteGraphql = API.graphql(graphqlOperation(onDeleteTodo)) as Observable<any>;
        const subscriptionOnDeleteTodo = deleteGraphql.subscribe({
            next: (data: Todo[]) => {
                console.log("subscriptionOnDeleteTodo", data);
                fetchTodos();
            }
        }, (err: any) => {
            console.log("subscriptionOnDeleteTodo", err);
        })

        return () => {
            console.log("unsubscribe events");
            subscriptionOnCreateTodo.unsubscribe();
            subscriptionOnUpdateTodo.unsubscribe();
            subscriptionOnDeleteTodo.unsubscribe();
        }

    }, []);

    const fetchTodos = async () => {
        try {
            const todoData = await API.graphql(graphqlOperation(listTodos)) as ListTodos;
            const todos = todoData.data.listTodos.items.sort((a: Todo, b: Todo) =>
                Date.parse(b.createdAt) - Date.parse(a.createdAt)
            )
            setTodos(todos);
        } catch (e) {
            console.error(e);
        }
    }

    const btnDelete = async (id: string) => {
        try {
            await API.graphql(graphqlOperation(deleteTodo, {input: {id}}));
        } catch (e) {
            console.error(e);
        }

    }

    const btnAddClick = async () => {
        console.log(todos);
        const suffix = todos.length + 1;
        const todo = {
            name: `todo${suffix}`,
            description: `description${suffix}`,
        }
        try {
            await API.graphql(graphqlOperation(createTodo, {input: todo}));
        } catch (e) {
            console.error(e);
        }

    }

    const btnUpdate = async (todo: Todo) => {
        const suffix = todo.name.length;
        const todoUpdate = {
            id: todo.id,
            name: `${todo.name} - ${suffix}`,
            description: `${todo.description} - ${suffix}`,
        }

        try {
            await API.graphql(graphqlOperation(updateTodo, {input: todoUpdate}));
        } catch (e) {
            console.error(e);
        }
    }


    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="https://nextjs.org">Next.js!</a>
                </h1>
                <div>
                    <button
                        onClick={btnAddClick}
                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                    >
                        Add
                    </button>
                </div>
                <hr/>
                {
                    todos && todos.map((todo, index) => {
                            return (
                                <div key={index} className={classNames('border', 'w-full', 'my-3', 'p-5')}>
                                    <h3>{todo.name}</h3>
                                    <p>{todo.description}</p>
                                    <button
                                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                                        onClick={() => {
                                            btnUpdate(todo)
                                        }}>update
                                    </button>
                                    <button
                                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                                        onClick={() => {
                                            btnDelete(todo.id)
                                        }}>delete
                                    </button>
                                </div>
                            )
                        }
                    )}
            </main>


        </div>
    )
}

export default Home
