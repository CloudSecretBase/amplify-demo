import type {NextPage} from 'next'
import Head from 'next/head'
import {API, graphqlOperation} from "aws-amplify";

import {listNews} from "../../src/graphql/queries";
import {deleteNews, createNews, updateNews} from "../../src/graphql/mutations";
import {onCreateNews, onDeleteNews, onUpdateNews} from "../../src/graphql/subscriptions";

import {useEffect, useState} from "react";
import classNames from "classnames";
import {ListNews, News} from '../../src/graphql/types';
import {Observable} from "zen-observable-ts";
import _ from "lodash";

const Home: NextPage = () => {
    const [news, setNews] = useState<News[]>([]);

    useEffect(() => {
        fetchNews();
        console.log("subscribing");
        const createGraphql = API.graphql(graphqlOperation(onCreateNews)) as Observable<any>;
        const subscriptionOnCreateNews = createGraphql.subscribe({
            next: (data: News[]) => {
                console.log("subscriptionOnCreateNews", data);
                fetchNews();
            }
        });

        let updateGraphql = API.graphql(graphqlOperation(onUpdateNews)) as Observable<any>;
        const subscriptionOnUpdateNews = updateGraphql.subscribe({
            next: (data: News[]) => {
                console.log("subscriptionOnUpdateNews", data);
                fetchNews();
            }
        }, (err: any) => {

        })
        let deleteGraphql = API.graphql(graphqlOperation(onDeleteNews)) as Observable<any>;
        const subscriptionOnDeleteNews = deleteGraphql.subscribe({
            next: (data: News[]) => {
                console.log("subscriptionOnDeleteNews", data);
                fetchNews();
            }
        }, (err: any) => {
            console.log("subscriptionOnDeleteNews", err);
        })

        return () => {
            console.log("unsubscribe events");
            subscriptionOnCreateNews.unsubscribe();
            subscriptionOnUpdateNews.unsubscribe();
            subscriptionOnDeleteNews.unsubscribe();
        }

    }, []);

    const fetchNews = async () => {
        try {
            const newsData = await API.graphql(graphqlOperation(listNews)) as ListNews;
            const news = newsData.data.listNews.items.sort((a: News, b: News) =>
                Date.parse(b.createdAt) - Date.parse(a.createdAt)
            )
            setNews(news);
        } catch (e) {
            console.error(e);
        }
    }

    const btnDelete = async (id: string) => {
        try {
            await API.graphql(graphqlOperation(deleteNews, {input: {id}}));
        } catch (e) {
            console.error(e);
        }

    }

    const btnAddClick = async () => {
        const suffix = news.length + 1;
        const newNews = {
            id: `${suffix}1`,
            showOrder: suffix,
            title: `news-${suffix}`,
            link: `news.com/${suffix}`,
            tag: _.sample(["game", "aws", "amplify", "react", "nextjs"]),
        }
        try {
            await API.graphql(graphqlOperation(createNews, {input: newNews}));
        } catch (e) {
            console.error(e);
        }

    }

    const btnUpdate = async (news: News) => {
        const suffix = news.title.length;
        const newsUpdate = {
            id: news.id,
            title: `${news.title}${suffix}`,
            link: `https://${news.title}.com`,
        }

        try {
            await API.graphql(graphqlOperation(updateNews, {input: newsUpdate}));
        } catch (e) {
            console.error(e);
        }
    }


    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main>
                <div>
                    <button
                        onClick={btnAddClick}
                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                    >
                        Add
                    </button>
                </div>
                <hr/>
                {
                    news && news.map((news, index) => {
                            return (
                                <div key={index} className={classNames('border', 'w-full', 'my-3', 'p-5')}>
                                    <h3>{news.title}</h3>
                                    <h3>{news.tag}</h3>
                                    <p>{news.link}</p>
                                    <button
                                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                                        onClick={() => {
                                            btnUpdate(news)
                                        }}>update
                                    </button>
                                    <button
                                        className={classNames('border', 'px-3', 'py-1', 'm-2')}
                                        onClick={() => {
                                            btnDelete(news.id)
                                        }}>delete
                                    </button>
                                </div>
                            )
                        }
                    )}
            </main>


        </div>
    )
}

export default Home
